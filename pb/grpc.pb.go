// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 所有字符串默认都是UTF-8编码
type Request struct {
	Rid       int64  `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	Code      int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Payload   []byte `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Debug     bool   `protobuf:"varint,4,opt,name=debug" json:"debug,omitempty"`
	SplitSize int32  `protobuf:"varint,5,opt,name=splitSize" json:"splitSize,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *Request) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *Request) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Request) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *Request) GetDebug() bool {
	if m != nil {
		return m.Debug
	}
	return false
}

func (m *Request) GetSplitSize() int32 {
	if m != nil {
		return m.SplitSize
	}
	return 0
}

type Response struct {
	Rid        int64  `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	ErrCode    int32  `protobuf:"varint,2,opt,name=errCode" json:"errCode,omitempty"`
	Code       int32  `protobuf:"varint,3,opt,name=code" json:"code,omitempty"`
	Message    string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Splited    bool   `protobuf:"varint,5,opt,name=splited" json:"splited,omitempty"`
	SplitIndex int32  `protobuf:"varint,6,opt,name=splitIndex" json:"splitIndex,omitempty"`
	Payload    []byte `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *Response) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *Response) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Response) GetSplited() bool {
	if m != nil {
		return m.Splited
	}
	return false
}

func (m *Response) GetSplitIndex() int32 {
	if m != nil {
		return m.SplitIndex
	}
	return 0
}

func (m *Response) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KfxService service

type KfxServiceClient interface {
	// 程序请求的主要入口
	DoWorks(ctx context.Context, opts ...grpc.CallOption) (KfxService_DoWorksClient, error)
}

type kfxServiceClient struct {
	cc *grpc.ClientConn
}

func NewKfxServiceClient(cc *grpc.ClientConn) KfxServiceClient {
	return &kfxServiceClient{cc}
}

func (c *kfxServiceClient) DoWorks(ctx context.Context, opts ...grpc.CallOption) (KfxService_DoWorksClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_KfxService_serviceDesc.Streams[0], c.cc, "/pb.KfxService/DoWorks", opts...)
	if err != nil {
		return nil, err
	}
	x := &kfxServiceDoWorksClient{stream}
	return x, nil
}

type KfxService_DoWorksClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type kfxServiceDoWorksClient struct {
	grpc.ClientStream
}

func (x *kfxServiceDoWorksClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kfxServiceDoWorksClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for KfxService service

type KfxServiceServer interface {
	// 程序请求的主要入口
	DoWorks(KfxService_DoWorksServer) error
}

func RegisterKfxServiceServer(s *grpc.Server, srv KfxServiceServer) {
	s.RegisterService(&_KfxService_serviceDesc, srv)
}

func _KfxService_DoWorks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KfxServiceServer).DoWorks(&kfxServiceDoWorksServer{stream})
}

type KfxService_DoWorksServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type kfxServiceDoWorksServer struct {
	grpc.ServerStream
}

func (x *kfxServiceDoWorksServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kfxServiceDoWorksServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KfxService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.KfxService",
	HandlerType: (*KfxServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoWorks",
			Handler:       _KfxService_DoWorks_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x71, 0xd3, 0xd4, 0xe9, 0xd1, 0x01, 0x9d, 0x18, 0x2c, 0x84, 0x50, 0x94, 0xc9, 0x62,
	0x88, 0x10, 0x2c, 0xec, 0xb0, 0x20, 0x36, 0x77, 0x60, 0x4e, 0xe2, 0x23, 0x8a, 0x28, 0xb5, 0xb1,
	0x53, 0x54, 0x90, 0x78, 0x2f, 0x1e, 0x0f, 0xd5, 0xc1, 0xb4, 0x91, 0xd8, 0xfe, 0xef, 0x2c, 0x9d,
	0xbf, 0xff, 0x00, 0x5a, 0x67, 0x9b, 0xd2, 0x3a, 0xd3, 0x1b, 0x9c, 0xd8, 0xba, 0xf8, 0x02, 0xae,
	0xe8, 0x6d, 0x43, 0xbe, 0xc7, 0x13, 0x48, 0x5c, 0xa7, 0x05, 0xcb, 0x99, 0x4c, 0xd4, 0x2e, 0x22,
	0xc2, 0xb4, 0x31, 0x9a, 0xc4, 0x24, 0x67, 0x32, 0x55, 0x21, 0xa3, 0x00, 0x6e, 0xab, 0x8f, 0x95,
	0xa9, 0xb4, 0x48, 0x72, 0x26, 0x17, 0x2a, 0x22, 0x9e, 0x42, 0xaa, 0xa9, 0xde, 0xb4, 0x62, 0x9a,
	0x33, 0x99, 0xa9, 0x01, 0xf0, 0x1c, 0xe6, 0xde, 0xae, 0xba, 0x7e, 0xd9, 0x7d, 0x92, 0x48, 0xc3,
	0xa2, 0xfd, 0xa0, 0xf8, 0x66, 0x90, 0x29, 0xf2, 0xd6, 0xac, 0x3d, 0xfd, 0x23, 0x20, 0x80, 0x93,
	0x73, 0x77, 0x7b, 0x87, 0x88, 0x7f, 0x6a, 0xc9, 0x58, 0xed, 0x95, 0xbc, 0xaf, 0x5a, 0x0a, 0x0a,
	0x73, 0x15, 0x71, 0xf7, 0x12, 0xfe, 0x24, 0x1d, 0x14, 0x32, 0x15, 0x11, 0x2f, 0x00, 0x42, 0x7c,
	0x58, 0x6b, 0xda, 0x8a, 0x59, 0xd8, 0x76, 0x30, 0x39, 0xac, 0xcb, 0x47, 0x75, 0xaf, 0x6f, 0x01,
	0x1e, 0x9f, 0xb7, 0x4b, 0x72, 0xef, 0x5d, 0x43, 0x78, 0x09, 0xfc, 0xde, 0x3c, 0x19, 0xf7, 0xe2,
	0xf1, 0xb8, 0xb4, 0x75, 0xf9, 0x7b, 0xd4, 0xb3, 0xc5, 0x00, 0x43, 0xc3, 0xe2, 0x48, 0xb2, 0x2b,
	0x56, 0xcf, 0xc2, 0xf9, 0x6f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x04, 0x28, 0x36, 0x51, 0x8c,
	0x01, 0x00, 0x00,
}
